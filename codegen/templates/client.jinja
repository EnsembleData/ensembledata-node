import { Requester } from "./requester.js";
import { filterUndefinedValues } from "./utils.js";

/** @typedef {import("./requester").EDResponse} EDResponse */

{% for tag, endpoints in tags %}
class {{ tag }}Endpoints {

    /**
     * @type {Requester}
     * @readonly
     */
    #requester;

    {% raw %}
    /** @param {{ requester: Requester }} options */{% endraw %}
    constructor({ requester }) {
        this.#requester = requester;
    }

    {% for endpoint in endpoints %}
    /**
     * @param {% raw %}{{{% endraw %}
    {%- for param in endpoint.params -%}
         {{ param.name }}{{ "?" if not param.required }}: {{ param.type | safe }};{{ " " }}
    {%- endfor %}
    {% raw %}}}{% endraw %} params 
     * @param {% raw %}{{ extraParams?: Record<string, any>, timeout?: number }} options{% endraw %}
     * @returns {Promise<EDResponse>}
     */
    {{ endpoint.functionName }}({
    {% for param in endpoint.params %}
        {{ param.name }}{{ "" if param.required else " = undefined" }},
    {% endfor %}
    }, options = {}) {
        const params = filterUndefinedValues({
            ...options.extraParams,
        {% for param in endpoint.params %}
        {% if param.transform == "join_with_semicolon" %}
            {{ param.param }}: {{ param.name }}.join(";")
        {% elif param.name == param.param %}
            {{ param.param }},
        {% else %}
            {{ param.param }}: {{ param.name }},
        {% endif %}
        {% endfor %}
        });
        return this.#requester.get("{{ endpoint.path }}", params, { timeout: options.timeout, {{ "returnTopLevelData: true" if endpoint.returnTopLevelData }} });
    }

    {% endfor %}
}

{% endfor %}

export class EDClient {
    /**
     * @type {Requester}
     * @readonly
     */
    #requester;

    /** @param {% raw %}{{ token: string, timeout?: number, maxNetworkRetries?: number }}{% endraw %} options */
    constructor({ token, timeout = 600, maxNetworkRetries = 3 }) {
        const requester = new Requester({ token, timeout, maxNetworkRetries });
        this.#requester = requester;

        {% for tag, _ in tags %}
        /** @readonly */
        this.{{ tag | lower }} = new {{ tag }}Endpoints({ requester });

        {% endfor %}
    }

    /**
     * @param {string} path
     * @param {Record<string, string>} params
     * @param {% raw %}{{ timeout?: number }} options{% endraw %}
     * @returns {Promise<EDResponse>}
     */
    async request(path, params, options = {}) {
        return this.#requester.get(path, params, { timeout: options.timeout });
    }
}

